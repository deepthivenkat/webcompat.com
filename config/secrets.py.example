#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

'''This file contains secrets and sensitive file-system locations and
settings that we don't want to be public.'''

from environment import *

# Secret key for signing cookies. Can be ignored for local testing.
SECRET_KEY = '~*change me*~'
HOOK_SECRET_KEY = '~*change me*~'

# Image uploading settings. PRODUCTION and STAGING can be ignored for
# local testing.
if PRODUCTION:
    UPLOADS_DEFAULT_DEST = ''
    UPLOADS_DEFAULT_URL = ''
elif STAGING:
    UPLOADS_DEFAULT_DEST = ''
    UPLOADS_DEFAULT_URL = ''
elif LOCALHOST:
    UPLOADS_DEFAULT_DEST = BASE_DIR + '/uploads/'
    UPLOADS_DEFAULT_URL = 'http://localhost:5000/uploads/'


# Database backup path.
if LOCALHOST:
    BACKUP_DEFAULT_DEST = BASE_DIR + '/backups/'
else:
    BACKUP_DEFAULT_DEST = ''

# Production GiHub Issues repo URI. Can be ignored for local testing.
if PRODUCTION:
    ISSUES_REPO_URI = ''
# Staging and Local instances use the same test repo
else:
    ISSUES_REPO_URI = os.environ.get('ISSUES_REPO_URI') or ''

# Get the secrets from [1] if you're part of the webcompat organization.
# Otherwise, create your own test and production applications.
#
# [1]<https://github.com/organizations/webcompat/settings/applications/>
# PRODUCTION and STAGING can be ignored for local testing.
# Production = webcompat.com
if PRODUCTION:
    GITHUB_CLIENT_ID = ''
    GITHUB_CLIENT_SECRET = ''
    GITHUB_CALLBACK_URL = ''
# Staging = staging.webcompat.com
elif STAGING:
    GITHUB_CLIENT_ID = ''
    GITHUB_CLIENT_SECRET = ''
    GITHUB_CALLBACK_URL = ''
else:
    # We're running on localhost, use the test application
    GITHUB_CLIENT_ID = os.environ.get('FAKE_ID') or ''
    GITHUB_CLIENT_SECRET = os.environ.get('FAKE_SECRET') or ''
    GITHUB_CALLBACK_URL = 'http://localhost:5000/callback'

# This is the oauth token we use to report issues on behalf of people
# who don't want to give GitHub oauth access (or don't have GitHub accounts).
# If you don't want to create another user for testing, you could put in
# your own access token. See help.github.com/articles/creating-an-access-token-for-command-line-use  # nopep8
OAUTH_TOKEN = os.environ.get('OAUTH_TOKEN') or ''  # nopep8
